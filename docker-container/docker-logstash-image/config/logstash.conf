input {
  jdbc {
    jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
    jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
    jdbc_connection_string => "jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${DATABASE_NAME}"
    jdbc_user => "${MYSQL_USER}"
    jdbc_password => "${MYSQL_USER_PASSWORD}"
    type => "authors"
    statement => "SELECT person.* ,JSON_ARRAYAGG(paper.paper_id) AS temp_papers FROM person LEFT JOIN author ON  author.person_id = person.person_id LEFT JOIN paper ON paper.paper_id = author.paper_id GROUP BY person.person_id"
  }
  jdbc {
    jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
    jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
    jdbc_connection_string => "jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${DATABASE_NAME}"
    jdbc_user => "${MYSQL_USER}"
    jdbc_password => "${MYSQL_USER_PASSWORD}"
    type => "papers"
    statement => "SELECT T1.*, T2.paper_references AS temp_references FROM ( SELECT paper.*, JSON_ARRAYAGG(person.person_name) AS temp_authors FROM paper LEFT JOIN author ON author.paper_id = paper.paper_id LEFT JOIN person ON person.person_id = author.person_id GROUP BY paper.paper_id ) T1 LEFT JOIN ( SELECT T3.paper_id, JSON_ARRAYAGG(T3.single_reference) AS paper_references FROM ( SELECT paper.paper_id, JSON_OBJECT('paper_reference', reference.reference_full, 'paper_reference_id', paper_as_reference.paper_id) AS single_reference FROM paper JOIN db.reference ON reference.paper_id = paper.paper_id LEFT JOIN paper_as_reference ON reference.reference_id = paper_as_reference.reference_id ) T3 GROUP BY T3.paper_id ) T2 ON T1.paper_id = T2.paper_id;"
  }
}

filter {

  if [type] == "papers"{
    json {
        source => "temp_references"
        target => "paper_references"
        remove_field => ["temp_references"]
      }
      json {
        source => "temp_authors"
        target => "paper_authors"
        remove_field => ["temp_authors"]
      }
  }

  if [type] == "authors" {
    json {
        source => "temp_papers"
        target => "papers_list"
        remove_field => ["temp_papers"]
      }
  }
}

output {
  if [type] == "papers" {
    elasticsearch {
      hosts => ["${ELASTIC_HOST}"]
      index => "${ELASTIC_INDEX_1}"
      document_id => "%{papers_id}"
    }

  }

  if [type] == "authors" {
    elasticsearch {
    hosts => ["${ELASTIC_HOST}"]
    index => "${ELASTIC_INDEX_2}"
    document_id => "%{person_id}"
  }

  }
  
  stdout {
    codec => rubydebug
  }
}
